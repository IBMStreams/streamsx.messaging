<?xml version="1.0" encoding="UTF-8"?>
<!--  
Copyright (C)2014, International Business Machines Corporation and  
others. All Rights Reserved. 
-->
<operatorModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
      <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.messaging/op$com.ibm.streamsx.messaging.xms$XMSSink.html">
The `XMSSink` operator takes messages from IBM InfoSphere Streams and can send them to a WebSphere MQ queue or topic.

The incoming tuple from InfoSphere Streams can be one or many of the following data types:
int8, uint8, int16, uint16, int32, uint32, int64, float32, float64, boolean, blob, or rstring.
The input tuple is serialized into a WebSphere MQ message either as a map, stream, bytes, xml, wbe, or wbe22 message,
according to the value of the message_class attribute in the connection specifications document.
An additional empty value can be specified in the message_class attribute, in which case the operator constructs an empty JMS or XMS message.
This message class cannot be used with a native schema.

**Consistent Region Behavior**
The `XMSSink` operator supports consistent region. This operator can be part of a consistent region but cannot be at start of a consistent region.

**Consistent Region Behavior**

The `XMSSink` operator supports consistent region. This operator can be part of a consistent region but cannot be at start of a consistent region.

**Exceptions**

The following list describes the common types of exceptions that can occur:
 * Run-time errors that halt the operator execution.
   * The `XMSSink` operator throws an exception and terminates in the following cases:
     * During the initial connect attempt, the **reconnectionPolicy** is set to `NoRetry`
       and the operator does not have a successful connection, or during transient connection failures
       the **reconnectionPolicy** is set to `BoundedRetry` and the operator does not have a successful connection
       after the number of attempts that are specified in the **reconnectionBound** parameter. Successive data is lost.
     * The queue name is unknown.
     * The user is not an authorized user of the queue.
     * The queue manager name is unknown.
     * The operator is unable to connect to the host.
     * The operator is unable to connect to the port.
 * Run time errors that cause the message to be dropped and an error message to be logged.
   * The `XMSSink` operator throws an exception and discards the message in the following circumstances:
     * The data that is being written is longer than the maximum message length specified in the queue in WebSphere MQ.
   * The discarded message is not sent to the WebSphere MQ queue or topic.
 * Compile time errors
   * The `XMSSink` operator throws a compile-time error in the following cases:
     * A native schema is specified and the message class is empty.
     * There is a mismatch between the data type of one or more attributes in the native schema
       and the data type of attributes in the input stream.
     * One or more native schema attributes do not have a matching attribute in the input stream schema.
     * The `connections.xml` file does not conform to `connections.xsd`.
     * The **connectionsDocument** parameter refers to a nonexistent connections file.
     * The **connectionsDocument** parameter is not specified and there is no `connections.xml` file inside the `etc` directory.
     * An invalid value is specified for the message class.
     * The **access** parameter does not refer to an existing access element in the native schema.
     * The **connection** parameter does not refer to an existing access element in the native schema.
     * A length is specified for a native schema attribute that does not have a string or blob data type.
     * A negative length is specified for a string or blob attribute in the native schema for a map, stream, xml, wbe, or wbe22 message class.
     * A negative length other than -2, -4, or -8 is specified for a string or blob attribute in the native schema for a bytes message class.

In all of these cases, the operator logs the exception in the console logs.
The information about the exception is also sent to the optional error output port,
unless it is a run time error that halts the operator or a compile time error.

**Note**: The `XMSSink` operator runs without considering the length value for all message classes
for string and bytes data types when a negative length of -1 is provided; it does not throw an error at either compile time or run time.

+ Examples

This example demonstrates the use of multiple `XMSSink` operators with different parameter combinations and an optional error output port.

	composite Main{
	graph
	stream &lt;int32 id, rstring fname, rstring lname>
	MyPersonNamesStream=Beacon()
	{
		param
		iterations:10u;
	}
	//XMSSink Operator with connections.xml 
	//defaulted to ./etc/connections.xml
	() as MySink1=XMSSink(MyPersonNamesStream)
	{
		param
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
	}
	
	//XMSSink Operator with the fully qualified 
	//name of connections.xml
	() as MySink2=XMSSink(MyPersonNamesStream)
	{
		param
			connectionDocument:&quot;/home/streamsuser/connections/XMSconnections.xml&quot;;
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
	}
	
	//XMSSink Operator with optional 
	//output error port specified
	stream &lt;tuple&lt;int32 id, rstring fname, 
	rstring lname>inTuple, rstring errorMessage>
	MySink3 = XMSSink(MyPersonNamesStream)
	{
		param
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
	}
	//XMSSink Operator with reconnectionPolicy 
	//specified as NoRetry
	() as  MySink4 = XMSSink( MyPersonNamesStream ) 
	{
		param
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
			reconnectionPolicy: NoRetry;
	}
	
	//XMSSink Operator with optional period 
	//and reconnectionPolicy specified
	() as MySink5 = XMSSink( MyPersonNamesStream )
	{
		param
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
			reconnectionPolicy: InfiniteRetry;
			period: 1.20;
	}
	//XMSSink Operator with reconnectionPolicy 
	//specified as BoundedRetry
	() as MySink6 = XMSSink( MyPersonNamesStream )
	{
		param
			connection: &quot;wbe&quot;;
			access: &quot;OutTrading&quot;;
			reconnectionPolicy: BoundedRetry;
			reconnectionBound: 2u;
			period: 1.20;
	}
	}

The following is a sample `connections.xml` file:

	&lt;st:connections xmlns:st=&quot;http://www.ibm.com/xmlns/prod/streams/adapters&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;>
	  &lt;connection_specifications>
	    &lt;connection_specification name=&quot;wbe&quot;>
	      &lt;XMS initial_context=&quot;file:///opt/InitialContext/&quot; 
	        connection_factory=&quot;TestConFac&quot;  />
		&lt;/connection_specification>
	  &lt;/connection_specifications>
	
	  &lt;access_specifications>
	    &lt;access_specification name=&quot;OutTrading&quot;>
	      &lt;destination identifier=&quot;TestDestination&quot; 
	      delivery_mode=&quot;persistent&quot; message_class=&quot;map&quot; />
	      &lt;uses_connection connection=&quot;wbe&quot;/>
	      &lt;native_schema>
	        &lt;attribute name=&quot;id&quot; type=&quot;Int&quot;/>
	        &lt;attribute name=&quot;fname&quot; type=&quot;String&quot;/>
	        &lt;attribute name=&quot;lname&quot; type=&quot;String&quot;/>
	      &lt;/native_schema>
		&lt;/access_specification>
	  &lt;/access_specifications>
	&lt;/st:connections>	
</description>
      <iconUri size="16">XMSSink_16.gif</iconUri>
      <iconUri size="32">XMSSink_32.gif</iconUri>
      <metrics>
        <metric>
          <name>nTruncatedInserts</name>
          <description>The number of tuples that have truncated attributes when they are converted to a message.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nFailedInserts</name>
          <description>
The number of failed inserts to the WebSphere MQ.
Failed insertions can occur when a message is dropped because of a run time error.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nConnectionAttempts</name>
          <description>The number of connection attempts that are made before a successful connection.</description>
          <kind>Counter</kind>
        </metric>
      </metrics>
      <customLiterals>
        <enumeration>
          <name>ReconnectionPolicy</name>
          <value>InfiniteRetry</value>
          <value>NoRetry</value>
          <value>BoundedRetry</value>
        </enumeration>
      </customLiterals>
      <libraryDependencies>
        <library>
          <cmn:description> IBM Message Service Client for C/C++ (XMS) libraries</cmn:description>
          <cmn:managedLibrary>
            <cmn:lib>gxi01l</cmn:lib>
            <cmn:lib>gxi</cmn:lib>
            <cmn:libPath>@XMS_HOME@/lib64</cmn:libPath>
            <cmn:includePath>@XMS_HOME@/tools/cpp/include</cmn:includePath>
            <cmn:includePath>@XMS_HOME@/tools/c/include</cmn:includePath>
            <cmn:command></cmn:command>
          </cmn:managedLibrary>
        </library>
        <library>
          <cmn:description>WebSphere MQ Client libraries</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>@MQ_HOME@/lib64</cmn:libPath>
            <cmn:includePath>@MQ_HOME@/lib64</cmn:includePath>
            <cmn:command></cmn:command>
          </cmn:managedLibrary>
        </library>
        <library>
          <cmn:description>Code that is common to both XMSSource and XMSSink is located in a directory ../Common relative to both of these operators.</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../Common</cmn:libPath>
            <cmn:includePath>../Common</cmn:includePath>
            <cmn:command></cmn:command>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
      <incrementalCompilationStrategy>ResultDependent</incrementalCompilationStrategy>
      <allowCustomLogic>true</allowCustomLogic>
      <codeTemplates>
        <codeTemplate name="XMSSink">
          <description>Basic XMSSink template</description>
          <template>() as ${sinkPrefix}Sink = XMSSink(${inputStream})   {
            param
            	connection : &quot;${ConnectionSpecificationName}&quot;;
                access : &quot;${AccessSpecificationName}&quot;;
        }</template>
        </codeTemplate>
      </codeTemplates>
      <splExpressionTree param="true"/>
    </context>
    <parameters>
      <allowAny>false</allowAny>
      <parameter>
        <name>reconnectionPolicy</name>
        <description>
This is an optional parameter that specifies the reconnection policy.
The valid values are `NoRetry`, `InfiniteRetry`, and `BoundedRetry`.
If the parameter is not specified, the reconnection policy is set to `BoundedRetry`
with a **reconnectionBound** of `5` and a **period** of 60 seconds.</description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>ReconnectionPolicy</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>reconnectionBound</name>
        <description>
This optional parameter specifies the number of successive connections that are attempted for an operator.
You can use this parameter only when the **reconnectionPolicy** parameter is specified and set to `BoundedRetry`,
otherwise a compile time error occurs.
If the **reconnectionBound** parameter is specified and the **reconnectionPolicy** parameter is not set,
a compile time error occurs. The default value for the **reconnectionBound** parameter is `5`.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>period</name>
        <description>
This optional parameter specifies the time period in seconds the operator waits before it tries to reconnect.
You can use this parameter only when the **reconnectionPolicy** parameter is specified,
otherwise a compile time error occurs. The default value for the **period** parameter is `60`.
</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>connection</name>
        <description>
This mandatory parameter identifies the name of the connection specification that contains an XMS element.</description>
        <optional>false</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>access</name>
        <description>
This mandatory parameter identifies the access specification name.</description>
        <optional>false</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>connectionDocument</name>
        <description>
This optional parameter specifies the path name of the file that contains the connection and access specifications,
which are identified by the **connection** and **access** parameters.
If the parameter is specified, it must have exactly one value that is a string constant.
If the parameter is not specified, the operator uses the file that is in the default location `../etc/connections.xml`.
If a relative path is specified, the path is relative to the root of the application directory.
</description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>
The `XMSSink` operator is configurable with a single input data port, which is required. 
The input port is non-mutating and its punctuation mode is Oblivious.
</description>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>
The `XMSSink` operator is configurable with an optional port that submits a tuple when an error occurs. 
The optional port is mutating and its punctuation mode is Free.

The error output port contains an optional first attribute which contains the input tuple that caused the error
and a second attribute of type rstring that details the error message. Only one error message is sent per failed tuple.
</description>
        <expressionMode>Constant</expressionMode>
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>true</rewriteAllowed>
        <windowPunctuationOutputMode>Free</windowPunctuationOutputMode>
        <windowPunctuationInputPort>-1</windowPunctuationInputPort>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>true</optional>
      </outputPortSet>
    </outputPorts>
  </cppOperatorModel>
</operatorModel>